/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class DatasetResponseFile extends SpeakeasyBase {}

/**
 * The response object for a dataset
 */
export class DatasetResponse extends SpeakeasyBase {
    /**
     * The size of the dataset in bytes
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bytes" })
    bytes?: number;

    /**
     * The timestamp of when the dataset was created
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * The description of the dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * The file in the dataset
     */
    @SpeakeasyMetadata({ elemType: DatasetResponseFile })
    @Expose({ name: "file" })
    @Type(() => DatasetResponseFile)
    file?: DatasetResponseFile[];

    /**
     * The id of this dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The name of the dataset file
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * The prompt related to the dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "prompt" })
    prompt?: string;

    /**
     * The purpose of the dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "purpose" })
    purpose?: string;

    /**
     * The task related to the dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "task" })
    task?: string;

    /**
     * The tenant that this dataset belongs to
     */
    @SpeakeasyMetadata()
    @Expose({ name: "tenant" })
    tenant?: string;

    /**
     * The timestamp of when the dataset was last updated
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;
}
