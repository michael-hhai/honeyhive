/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class SessionEventQueryChildren extends SpeakeasyBase {}

/**
 * The configuration of LLM, Tool or other for the event
 */
export class SessionEventQueryConfig extends SpeakeasyBase {}

/**
 * Error from the event
 */
export class SessionEventQueryError extends SpeakeasyBase {}

/**
 * Inputs to the event
 */
export class SessionEventQueryInputs extends SpeakeasyBase {}

/**
 * Metadata of the event
 */
export class SessionEventQueryMetadata extends SpeakeasyBase {}

/**
 * The request object for querying session events
 */
export class SessionEventQuery extends SpeakeasyBase {
    /**
     * Child events
     */
    @SpeakeasyMetadata({ elemType: SessionEventQueryChildren })
    @Expose({ name: "children" })
    @Type(() => SessionEventQueryChildren)
    children?: SessionEventQueryChildren[];

    /**
     * The configuration of LLM, Tool or other for the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "config" })
    @Type(() => SessionEventQueryConfig)
    config?: SessionEventQueryConfig;

    /**
     * Duration of the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "duration" })
    duration?: number;

    /**
     * Error from the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    @Type(() => SessionEventQueryError)
    error?: SessionEventQueryError;

    /**
     * The ID of the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "event_id" })
    eventId?: string;

    /**
     * The name for the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "event_name" })
    eventName?: string;

    /**
     * The type of the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "event_type" })
    eventType?: string;

    /**
     * Inputs to the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "inputs" })
    @Type(() => SessionEventQueryInputs)
    inputs?: SessionEventQueryInputs;

    /**
     * Metadata of the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => SessionEventQueryMetadata)
    metadata?: SessionEventQueryMetadata;

    /**
     * Output of the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "output" })
    output?: string;

    /**
     * The parent ID of the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "parent_id" })
    parentId?: string;

    /**
     * Source of the event
     */
    @SpeakeasyMetadata()
    @Expose({ name: "source" })
    source?: string;
}
