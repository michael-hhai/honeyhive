/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The input variables for the generation
 */
export class GenerateQueryInput extends SpeakeasyBase {}

/**
 * The metadata to track for the generation
 */
export class GenerateQueryMetadata extends SpeakeasyBase {}

/**
 * The user properties to track for the generation
 */
export class GenerateQueryUserProperties extends SpeakeasyBase {}

/**
 * The request object for generating text
 */
export class GenerateQuery extends SpeakeasyBase {
    /**
     * The number of generations to be returned
     */
    @SpeakeasyMetadata()
    @Expose({ name: "best_of" })
    bestOf?: number;

    /**
     * The ground truth of the generation
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ground_truth" })
    groundTruth?: string;

    /**
     * The input variables for the generation
     */
    @SpeakeasyMetadata()
    @Expose({ name: "input" })
    @Type(() => GenerateQueryInput)
    input?: GenerateQueryInput;

    /**
     * The metadata to track for the generation
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => GenerateQueryMetadata)
    metadata?: GenerateQueryMetadata;

    /**
     * The metric used for sorting the generations
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metric" })
    metric?: string;

    /**
     * The unique ID of the fine-tuned model to generate from
     */
    @SpeakeasyMetadata()
    @Expose({ name: "model_id" })
    modelId?: string;

    /**
     * The unique IDs of the prompts to generate from
     */
    @SpeakeasyMetadata()
    @Expose({ name: "prompts" })
    prompts?: string[];

    /**
     * The sampling method used for generating the generations
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sampling" })
    sampling?: string;

    /**
     * The source of the generation
     */
    @SpeakeasyMetadata()
    @Expose({ name: "source" })
    source?: string;

    /**
     * A boolean flag that represents whether you want to generate a streaming output
     */
    @SpeakeasyMetadata()
    @Expose({ name: "stream" })
    stream?: boolean;

    /**
     * The task for which the generation is being requested
     */
    @SpeakeasyMetadata()
    @Expose({ name: "task" })
    task?: string;

    /**
     * The user properties to track for the generation
     */
    @SpeakeasyMetadata()
    @Expose({ name: "user_properties" })
    @Type(() => GenerateQueryUserProperties)
    userProperties?: GenerateQueryUserProperties;
}
